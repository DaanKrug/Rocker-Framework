function getTabulation(n){
	var tabulation = '<span style="width: 30px !important;">&nbsp;&nbsp;&nbsp;</span>';
	var tabs = '';
	for(var i = 0; i < n; i++){
		tabs += tabulation;
	}
	return tabs;
};
//
var appenderDesc = '';
appenderDesc += 'Creates a element (to \'append\' other elements) whit the specified \'id\'';
appenderDesc += ' ,in the relative position to other elements of \'arrayFields\' (of a <code>RockerForm</code>).<br/>';
appenderDesc += '<code>new Appender(id,style,clazz,onclick,position,newTabTitle,arrayFields,bootstrapClass,bootstrapNewLine);</code><br/><br/>';
appenderDesc += 'This is useful to create dinamic elements (modify or add a new elementon execution time) ';
appenderDesc += 'into a <code>RockerForm</code>, after he was created.<br/><br/>';
appenderDesc += 'Valid values to \'position\' : [\'topTable\',\'bottomTable\',\'topFields\',\'bottomFields\',\'bottomForm\']';
appenderDesc += 'try use each one of them for better understanding.<br/><br/>';
appenderDesc += getTabulation(1);
appenderDesc += '<code>newTabTitle</code>: title to draw the appender into a new Bootstrap Tab (style) whit this title.<br/>';
appenderDesc += 'If his value is null or the <code>RockerForm</code>[tableOnNewTab] is false, ';
appenderDesc += 'the appender is drawed according only whit the \'position\' rule.<br/><br/>';
appenderDesc += getTabulation(1);
appenderDesc += '<code>arrayFields</code>: a list of components to append internally into a <code>Appender</code>';
appenderDesc += ' and not directly in the generated <code>form</code>.<br/>';
appenderDesc += getTabulation(1);
appenderDesc += 'Pay atention:<br/>';
appenderDesc += getTabulation(2);
appenderDesc += '- If the appender is outside of the <code>form</code> ( in a other tab for example ), ';
appenderDesc += 'these components are too outside of the <code>form</code>.<br/>';
appenderDesc += getTabulation(2);
appenderDesc += '- Use \'topFields\' or \'bottomFields\' to append input data elements whit ';
appenderDesc += 'the <code>Appender</code> inside a <code>form</code>.<br/>';
appenderDesc += getTabulation(2);
appenderDesc += '- For all cases its strongly recommended that input data elements ';
appenderDesc += '(data that should be submitted whit a form) stay directly ';
appenderDesc += 'in main \'arrayFields\' element of the <code>RockerForm</code>.<br/>';
appenderDesc += getTabulation(2);
appenderDesc += '- Recommended use (Projected use idea) of <code>Appender</code> is for special elements construction.';
//
var hiddenDesc = 'Creates a input type hidden. Should be used in a array to be passed to a RockerForm constructor.';
hiddenDesc += '<br/><br/><code>...<br/>arrayFields[i] = new Hidden(\'id\',\'\');<strong>*</strong><br/>i++;<br/>...<br/> </code><br/><br/>';
hiddenDesc += '[*] See <strong>Quick Explanatory Guide -> C.O.C ';
hiddenDesc += '(Convention Over Configuation) terms - <code>id</code></strong><br/>';
//
var buttonDesc = '';
buttonDesc += 'Creates a HTML Button element. Only for use inside a <code>RockerForm</code> or inside a<code>Appender</code>.<br/><br/>';
buttonDesc += '<code>new Button(id,value,onclick,style,bootstrapClass,bootstrapNewLine)</code><br/><br/>';
buttonDesc += 'For inside a <code>RockerForm</code>:<strong>*</strong><br/>';
buttonDesc += getTabulation(1);
buttonDesc += 'Put the Button object into a RockerForm arrayFields: <code>arrayFields[i] = new Button(...);</code><br/><br/>';
buttonDesc += 'For inside a <code>Appender</code>:<strong>*</strong><br/>';
buttonDesc += getTabulation(1);
buttonDesc += 'Put the Button object into a Appender arrayFields: <code>arrayFieldsAppender[j] = new Button(...);</code><br/><br/>';
buttonDesc += '<strong>[*]</strong>example: <br/><code><br/>';
buttonDesc += '...<br/>';
buttonDesc += 'arrayFieldsAppender4[j] = new Button(\'btRockstarsCurrentUser\',<br/>';
buttonDesc += getTabulation(2);
buttonDesc += '\'See Only Rock Stars Created by Me\',<br/>';
buttonDesc += getTabulation(2);
buttonDesc += '\'singletonInstance.showOnlyRockstarsFromCurrentUser(); \',<br/>';
buttonDesc += getTabulation(2);
buttonDesc += '\'background-color: #ff0 !important; color: #f63 !important;\',<br/>';
buttonDesc += getTabulation(2);
buttonDesc += '\'col-md-2\',false);<br/>';
buttonDesc += 'j++;<br/>';
buttonDesc += '...<br/>';
buttonDesc += '</code><br/>';
//
var checkGroupDesc = 'Creates a element that is a group of HTML checkbox options.<br/>';
checkGroupDesc += 'Could be multi-selection and could be setted default values.<br/><br/>';
checkGroupDesc += '<code>';
checkGroupDesc += 'new CheckGroup(label,name,arrayCheckLabels,arrayCheckNames,arrayCheckCheckeds,minChecks,bootstrapClass,bootstrapNewLine)';
checkGroupDesc += '</code><br/><br/>';
checkGroupDesc += 'Only for use whit the <code>RockerForm</code>:<br/><br/>';
checkGroupDesc += '<code>';
checkGroupDesc += getTabulation(1);
checkGroupDesc += '...<br/>';
checkGroupDesc += getTabulation(1);
checkGroupDesc += 'arrayFields[i] = new CheckGroup(\'Preferences\',\'preferences\',<br/>';
checkGroupDesc += getTabulation(3);
checkGroupDesc += '[\'Pizza\',\'Orange Juice\', \'Milk\', \'Apple\'],//Array of element labels<br/>';
checkGroupDesc += getTabulation(3);
checkGroupDesc += '[\'pizza\',\'orangejuice\', \'milk\', \'apple\'],//Array of element values<br/>';
checkGroupDesc += getTabulation(3);
checkGroupDesc += '[true,false,false,\'true\'],//Defaul element values. <br/>';
checkGroupDesc += getTabulation(6);
checkGroupDesc += '//Could be a boolean or \'true\' or \'false\'.<br/>';
checkGroupDesc += getTabulation(6);
checkGroupDesc += '//Everybody know that Rock Stars like Pizza and Apple(!!!) or not(???)<br/>';
checkGroupDesc += getTabulation(3);
checkGroupDesc += '1,//number of minimal checkboxes selected on form send.<br/>';
checkGroupDesc += getTabulation(3);
checkGroupDesc += '\'col-sm-2\',false);<br/>';
checkGroupDesc += getTabulation(1);
checkGroupDesc += 'i++;<br/>';
checkGroupDesc += getTabulation(1);
checkGroupDesc += '...<br/>';
checkGroupDesc += '</code>';
// 
var inputTextDesc = 'Creates a input text internally to a <code>RockerForm</code>.<br/><br/>';
inputTextDesc += '<code>new InputText(label,name,defaultValue,width,validator,placeHolder,<br/>';
inputTextDesc += getTabulation(2);
inputTextDesc += 'disabled,bootstrapClass,bootstrapNewLine);<br/></code><br/><br/>';
inputTextDesc += 'Example:<br/><code>';
inputTextDesc += '...<br/>';
inputTextDesc += 'arrayFields[i] = new InputText(\'Rock Star Name\',\'name\',\'\',130,nameValidator,<br/>';
inputTextDesc += getTabulation(4);
inputTextDesc += '\'Rock Star Name Here\',false,\'col-md-2\',true);<br/>';
inputTextDesc += 'i++;<br/>';
inputTextDesc += '...<br/>';
inputTextDesc += '</code><br/><br/>';
inputTextDesc += 'See about the input <strong>validators</strong> in sections ';
inputTextDesc += ' <code>RockerValidator</code> and  <code>RockerCustomValidator</code>.';
//
var labelDesc = 'Creates a simple label, whitout a input data element.<br/><br/>';
labelDesc += '<code>new Label(value,Spacers,bootstrapClass,bootstrapNewLine);</code><br/><br/>';
labelDesc += 'Example:<br/><code>';
labelDesc += '...<br/>';
labelDesc += 'arrayFieldsAppender4[j] = new Label(\'&lt;strong&gt;Example of use of ';
labelDesc += '&lt;span style="\'<br/>';
labelDesc += getTabulation(9);
labelDesc += '+ \'color: #01f; font-family: Segoe UI; font-size: 11px;"&gt;\'<br/>';
labelDesc += getTabulation(9);
labelDesc += '+ \' additionalParamsAndValuesOnRequestTable&lt;/span&gt;\'<br/>';
labelDesc += getTabulation(9);
labelDesc += '+ \' parameter on form/table&lt;/strong&gt;\',<br/>';
labelDesc += getTabulation(9);
labelDesc += '0,\'col-md-7\',false);<br/>';
labelDesc += 'j++;<br/>';
labelDesc += '...';
labelDesc += '</code>';
//
var radioGroupDesc = 'Creates a radio button group,';
radioGroupDesc += ' for a select one of multiple options of a single attribute.<br/><br/>';
radioGroupDesc += '<code>';
radioGroupDesc += 'new RadioGroup(label,name,arrayLabels,arrayValues,<br/>';
radioGroupDesc += getTabulation(3);
radioGroupDesc += 'defaultValue,nullable,bootstrapClass,bootstrapNewLine);';
radioGroupDesc += '</code><br/><br/>';
radioGroupDesc += 'Example:<br/>';
radioGroupDesc += '<code>';
radioGroupDesc += '...<br/>';
radioGroupDesc += 'arrayFields[i] = new RadioGroup(\'Was born in England?\',\'bornengland\',<br/>';
radioGroupDesc += getTabulation(4);
radioGroupDesc += '[\'Yes\',\'No\'],[true,false],false,false,\'col-sm-2\',true);<br/>';
radioGroupDesc += 'i++;<br/>';
radioGroupDesc += '...';
radioGroupDesc += '</code>';
//
var rockerFormDesc = 'Creates a <code>RockerForm</code>, that is the main component of framework.<br/>';
rockerFormDesc += 'All other components are used into them, or positioned near them.<br/><br/>';
rockerFormDesc += 'Important: See the <strong>Quick Explanatory Guide</strong> section to know';
rockerFormDesc += ' the C.O.C (Convention over Configurations) parameters in that the framework is based.';
rockerFormDesc += '<br/><br/>';
rockerFormDesc += '<code>';
rockerFormDesc += 'RockerForm = function(title,idAppenderForm,horizontalAlignFields,<br/>';
rockerFormDesc += getTabulation(6);
rockerFormDesc += 'width,closable,modal,arrayFields,actionForm,onclickSubmit,<br/>';
rockerFormDesc += getTabulation(6);
rockerFormDesc += 'onclickCancel,textSubmit,textCancel,errorCode,jsonCode,<br/>';
rockerFormDesc += getTabulation(6);
rockerFormDesc += 'posTop, posLeft, titleTable, arrayTableColumns,typeObject,<br/>';
rockerFormDesc += getTabulation(6);
rockerFormDesc += 'additionalParamsAndValuesOnRequestTable,onclose,<br/>';
rockerFormDesc += getTabulation(6);
rockerFormDesc += 'drawTableOnTop,initialLineNumbersTable,<br/>';
rockerFormDesc += getTabulation(6);
rockerFormDesc += 'visibleButtonsTable,<br/>';
rockerFormDesc += getTabulation(6);
rockerFormDesc += 'deleteAndEditButtonsOnTable,tableOnNewTab,onRead);';
rockerFormDesc += '</code>';
rockerFormDesc += '<br/><br/>';
rockerFormDesc += 'A <code>RockerForm</code> whitout a associated <code>RockerTable</code> is possible, then should pass a \'null\'';
rockerFormDesc += ' value into a place of arrayTableColumns parameter value.<br/>';
rockerFormDesc += 'However this could not be helpfull in almost of cases.';
rockerFormDesc += '<br/><br/>';
rockerFormDesc += 'Example:<br/><code>';
rockerFormDesc += '...<br/>';
rockerFormDesc += 'var RockstarForm = function(idAppenderForm){<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.title = "Manage Rockstars";<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.idAppenderForm = idAppenderForm;<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.horizontalAlignFields = false;<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.width = 900;// -1 for auto, > 0 to fixed size<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.closable = true;<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.modal = false;<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.actionForm = "http://localhost:4000/rockstars";<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.onclickSubmit = \'singletonInstance.showList();\';<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.onRead = \'singletonInstance.showForm();\';<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.onclickCancel = \'\';<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.textSubmit = \'Submit\';<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.textCancel = \'Cancel\';<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.errorCode = \'ERROR_606\';// errorCode is a  C.O.C<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.jsonCode = \'JSON_767\'; // jsonCode is a C.O.C<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.posTop = 20;<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.posLeft = 30;<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.titleTable = "Greatest Rockstars of World ( or some of them )";<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.typeObject = \'Rockstar\'; // object class/name on the model<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.aliasObject = \'Rockstar\';<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += '// the name that is presented on UI relative to \'typeObject\'<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.additionalParamsAndValuesOnRequestTable = \'\';<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.onclose = \'\';//JS function call here  ... <br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.drawTableOnTop = false;<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += '// if the data table of the form should be draw before the form input <br/>';
rockerFormDesc += getTabulation(2);
rockerFormDesc += 'elements (input, select, textarea) or after them.<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.initialLineNumbersTable = 5;<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.visibleButtonsTable = 3;<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.deleteAndEditButtonsOnTable = true;<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.tableOnNewTab = true;<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += '// true to put a form into one tab, and table in another - Bootstrap nav-bar<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.idToClickOnComplete = (this.tableOnNewTab ? <br/>';
rockerFormDesc += getTabulation(4);
rockerFormDesc += '(\'showerTable_f_\' + this.idAppenderForm) : null);<br/>';
rockerFormDesc += '...<br/><br/>';
rockerFormDesc += '...<br/>';
rockerFormDesc += 'this.singletonInstanceForm = new RockerForm(this.title,this.idAppenderForm,<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.horizontalAlignFields,this.width,<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.closable,this.modal,this.getArrayFields(),<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.actionForm,this.onclickSubmit,this.onclickCancel,<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.textSubmit,this.textCancel,this.errorCode,this.jsonCode,<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.posTop,this.posLeft,this.titleTable, <br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.getArrayTableColumns(true),this.typeObject,this.aliasObject,<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.additionalParamsAndValuesOnRequestTable,<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.onclose,this.drawTableOnTop,<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.initialLineNumbersTable,this.visibleButtonsTable,<br/>';
rockerFormDesc += getTabulation(1);
rockerFormDesc += 'this.deleteAndEditButtonsOnTable,this.tableOnNewTab,this.onRead);<br/>';
rockerFormDesc += '...';
rockerFormDesc += '</code>';
//
var rockerTableDesc = 'Creates a <code>RockerTable</code> outside/independent of a <code>RockerForm</code>.<br/>';
rockerTableDesc += 'For interaction whit a <code>RockerForm</code>, its strongly';
rockerTableDesc += ' recommended use the <code>RockerTable</code> provided internally by them.';
rockerTableDesc += '<br/><br/>';
rockerTableDesc += '<code>';
rockerTableDesc += 'new RockerTable(idToInner,title,<br/>';
rockerTableDesc += getTabulation(3);
rockerTableDesc += 'maxPageButtons,arrayTableColumns,baseActionFilterAndLoad,<br/>';
rockerTableDesc += getTabulation(3);
rockerTableDesc += 'typeObject,deleteAndEditButtons,nameForm,idToInnerForm,<br/>';
rockerTableDesc += getTabulation(3);
rockerTableDesc += 'requestUpdateOnSetRows,additionalParamsAndValuesOnRequest,printAllowed,onRead);<br/>';
rockerTableDesc += '</code>';
rockerTableDesc += '<br/><br/>';
rockerTableDesc += 'Example:<br/>';
rockerTableDesc += '<code>';
rockerTableDesc += '...<br/>';
rockerTableDesc += 'this.actionForm = "http://localhost:4000/rockstars";<br/>';
rockerTableDesc += 'this.typeObject = \'Rockstar\'; // object class/name on the model<br/>';
rockerTableDesc += 'this.additionalParamsAndValuesOnRequestTable = \'\';<br/>';
rockerTableDesc += '...<br/><br/>';
rockerTableDesc += '...<br/>';
rockerTableDesc += 'new RockerTable(\'appender8\',<br/>';
rockerTableDesc += getTabulation(3);
rockerTableDesc += '\'All Rockstars - On a independent RockerTable\',<br/>';
rockerTableDesc += getTabulation(3);
rockerTableDesc += '2,this.getArrayTableColumns(false),<br/>';
rockerTableDesc += getTabulation(3);
rockerTableDesc += 'this.actionForm,this.typeObject,false,null,null,true,<br/>';
rockerTableDesc += getTabulation(3);
rockerTableDesc += 'this.additionalParamsAndValuesOnRequestTable,false,null);<br/>';
rockerTableDesc += '...';
rockerTableDesc += '</code>';
//
var spacerDesc = 'Create a spacer element that help the layout organization.<br/><br/>';
spacerDesc += '<code>new Spacer(height,hexColorCode,bootstrapClass,bootstrapNewLine);</code><br/><br/>';
spacerDesc += 'Example:<br/>';
spacerDesc += '<code>';
spacerDesc += '...<br/>';
spacerDesc += 'arrayFieldsAppender4[j] = new Spacer(1,\'36d43b\',\'col-sm-1\',true);<br/>';
spacerDesc += 'j++;<br/>';
spacerDesc += '...';
spacerDesc += '</code>';
//
var stylerDesc = 'Creates a internal (on <code>RockerForm</code>) CSS appender element,';
stylerDesc += 'to add a new <code>&lt;style&gt;&lt;/style&gt;</code> on execution time, when the <code>RockerForm</code> is created.<br/>';
stylerDesc += 'These dinamic styles will be applied to all elements ( that match CSS rules ) bottom then.<br/><br/>';
stylerDesc += '<code>new Styler(classNames,styles);</code><br/><br/>';
stylerDesc += 'Example:<br/>';
stylerDesc += '<code>';
stylerDesc += '...<br/>';
stylerDesc += 'arrayFields[i] = new Styler(';
stylerDesc += '[\'.yellowDiv\',\'.redSpan\'],<br/>';
stylerDesc += getTabulation(10);
stylerDesc += '[\'background-color: #ff0; width: 200px;\',<br/>';
stylerDesc += getTabulation(12);
stylerDesc += '\'background-color: #f00; float: left;\']';
stylerDesc += ');<br/>';
stylerDesc += 'i++;<br/>';
stylerDesc += '...';
stylerDesc += '</code><br/><br/>';
stylerDesc += 'Generates a: <br/>';
stylerDesc += '<code>';
stylerDesc += '&lt;style&gt;<br/>';
stylerDesc += getTabulation(1);
stylerDesc += '.yellowDiv&#123;<br/>';
stylerDesc += getTabulation(3);
stylerDesc += 'background-color: #ff0; width: 200px;<br/>';
stylerDesc += getTabulation(1);
stylerDesc += '&#125;<br/>';
stylerDesc += getTabulation(1);
stylerDesc += '.redSpan&#123;<br/>';
stylerDesc += getTabulation(3);
stylerDesc += 'background-color: #f00; float: left;<br/>';
stylerDesc += getTabulation(1);
stylerDesc += '&#125;<br/>';
stylerDesc += '&lt;/style&gt;';
stylerDesc += '</code>';
//
var textAreaDesc = 'Creates a <code>TextArea</code> element into a <code>RockerForm</code>.<br/>';
textAreaDesc += 'Could be a simple HTML textarea or a RichEditor ';
textAreaDesc += 'generated by the <strong>ckeditor</strong> integration.<br/><br/>';
textAreaDesc += '<code>';
textAreaDesc += 'new TextArea(label,name,defaultValue,cols,rows,width,validator,usingCompletation,<br/>';
textAreaDesc += getTabulation(3);
textAreaDesc += 'richEditor,readonly,placeHolder,bootstrapClass,bootstrapNewLine);';
textAreaDesc += '</code><br/><br/>';
textAreaDesc += 'Example:<br/>';
textAreaDesc += '<code>';
textAreaDesc += '...<br/>';
textAreaDesc += 'arrayFields[i] = new TextArea(\'Biography (Forbidden chars: !,@,&,%,+)\',<br/>';
textAreaDesc += getTabulation(6);
textAreaDesc += '\'biography\',\'\',300,5,800,validator3,true,<br/>';
textAreaDesc += getTabulation(6);
textAreaDesc += 'true,false,\'alert(\\\'call to action here!\\\');\',\'col-md-12\',false);<br/>';
textAreaDesc += 'i++;<br/>';
textAreaDesc += '...';
textAreaDesc += '</code>';
//
var upperFileDesc = 'Creates a <code>UpperFile</code> input to upload a file, ';
upperFileDesc += 'that simulates an \'ajax submit\' and where complete, atualize the input data url.<br/><br/>';
upperFileDesc += '<code>';
upperFileDesc += 'new UpperFile(id,label,value,width,height,appenderId,<br/>';
upperFileDesc += getTabulation(3);
upperFileDesc += 'actionBaseForm,titleUploaderForm,top,left,hideInputField,<br/>';
upperFileDesc += getTabulation(3);
upperFileDesc += 'validExtensions,onbeforeOpen,bootstrapClass,bootstrapNewLine);';
upperFileDesc += '</code>';
upperFileDesc += '<br/><br/>';
upperFileDesc += 'Example:<br/>';
upperFileDesc += '<code>';
upperFileDesc += '...<br/>';
upperFileDesc += 'var onbeforeOpen = \'if(singletonRockerCommons.getElement(\\\'id\\\').value <= 0){<br/>';
upperFileDesc += getTabulation(3);
upperFileDesc += 'alert(\\\'Rockstar yet dont was saved!\\\'); return false;}\';<br/>';
upperFileDesc += '//if a rockstar is new Object (dont have a id into<br/>';
upperFileDesc += getTabulation(1);
upperFileDesc += 'a input hidden \'id\'), dont open the photo upload form\'<br/>';
upperFileDesc += 'arrayFields[i] = new UpperFile(\'rockstarPhoto\',\'Rock Star PHOTO\',\'\',<br/>';
upperFileDesc += getTabulation(6);
upperFileDesc += '170,200,\'appenderBase\',this.actionForm,<br/>';
upperFileDesc += getTabulation(6);
upperFileDesc += '\'Choice a Rock Star Photo\',20,30,false,<br/>';
upperFileDesc += getTabulation(6);
upperFileDesc += '[\'png\',\'gif\',\'pdf\'],onbeforeOpen,\'col-sm-2\',false);<br/>';
upperFileDesc += 'i++;<br/>';
upperFileDesc += '...';
upperFileDesc += '</code>';
//
var upperFileS3Desc = 'Creates a <code>UpperFileS3</code> input to upload a file into a AWS S3 bucket (Amazon service), ';
upperFileS3Desc += 'that simulates an \'ajax submit\' and where complete, atualize the input data url.<br/><br/>';
upperFileS3Desc += '<code>';
upperFileS3Desc += 'new UpperFileS3(id,label,value,width,height,appenderId,<br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += 'titleUploaderForm,top,left,hideInputField,validExtensions,<br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += 'onbeforeOpen,maxSize,delayTimeMsgs,<br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += 's3user,s3password,s3region,s3bucket,s3BaseUrl,<br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += 'fixedFileName,fileNamePrefix,bootstrapClass,bootstrapNewLine);<br/>';
upperFileS3Desc += '</code><br/><br/>';
upperFileS3Desc += 'Example:<br/>';
upperFileS3Desc += '<code>';
upperFileS3Desc += '...<br/>';
upperFileS3Desc += 'var onbeforeOpenS3 = \'if(singletonRockerCommons.getElement(\\\'id\\\').value <= 0){<br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += 'alert(\\\'Rockstar yet dont was saved!\\\'); return false;}\';<br/>';
upperFileS3Desc += '//if a rockstar is new Object (dont have a id into the<br/>';
upperFileS3Desc += getTabulation(1);
upperFileS3Desc += 'input hidden \'id\'), dont open the photo upload form<br/>';
upperFileS3Desc += 'var s3user = \'my S3 bucket user\'; //your AWS S3 user.<br/>';
upperFileS3Desc += 'var s3password = \'my S3 bucket password\'; //your AWS S3 password.<br/>';
upperFileS3Desc += 'var s3region = \'us-west-2\'; //your AWS S3 bucket region.<br/>';
upperFileS3Desc += 'var s3bucket = \'my S3 Bucket\'; //your AWS S3 bucket name.<br/>';
upperFileS3Desc += 'var s3BaseUrl = \'https://s3-us-west-2.amazonaws.com\'; //your AWS S3 base url.<br/>';
upperFileS3Desc += 'var fixedFileName = \'\\\\\\\'rockstarPhotoOf_\\\\\\\'<br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += '+ singletonRockerCommons.getElement(\\\\\\\'id\\\\\\\').value\';<br/>';
upperFileS3Desc += 'var fileNamePrefix = \'singletonRockerCommons.getElement(\\\\\\\'owner\\\\\\\').value <br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += '+ \\\\\\\'_\\\\\\\';\';<br/>';
upperFileS3Desc += 'arrayFields[i] = new UpperFileS3(\'rockstarPhotos3\',<br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += '\'Rock Star PHOTO S3\',\'\',170,200,\'appenderBase\',<br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += '\'Choice a Rock Star Photo\',20,30,false,<br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += '[\'png\',\'gif\',\'pdf\'],onbeforeOpenS3,(1024 * 1024),2500,<br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += 's3user,s3password,s3region,s3bucket,s3BaseUrl,<br/>';
upperFileS3Desc += getTabulation(3);
upperFileS3Desc += 'fixedFileName,fileNamePrefix,\'col-sm-2\',false);<br/>';
upperFileS3Desc += 'i++;<br/>';
upperFileS3Desc += '...';
upperFileS3Desc += '</code><br/><br/>';
upperFileS3Desc += '<em>/**<br/>';
upperFileS3Desc += getTabulation(1);
upperFileS3Desc += '<strong>maxSize</strong>: in Bytes<br/>';
upperFileS3Desc += getTabulation(1);
upperFileS3Desc += '<strong>delayTimeMsgs</strong>: time to hide alert msgs after them are show - miliseconds<br/>';
upperFileS3Desc += getTabulation(1);
upperFileS3Desc += '<strong>s3user</strong>: S3 bucket acount user<br/>';
upperFileS3Desc += getTabulation(1);
upperFileS3Desc += '<strong>s3password</strong>: S3 bucket acount password<br/>';
upperFileS3Desc += getTabulation(1);
upperFileS3Desc += '<strong>s3region</strong>: S3 bucket region<br/>';
upperFileS3Desc += getTabulation(1);
upperFileS3Desc += '<strong>s3bucket</strong>: S3 bucket name<br/>';
upperFileS3Desc += getTabulation(1);
upperFileS3Desc += '<strong>s3BaseUrl</strong>: S3 bucket url<br/><br/>';
upperFileS3Desc += getTabulation(1);
upperFileS3Desc += 'When in serious applications use other forms of obtain<br/> ';
upperFileS3Desc += getTabulation(4);
upperFileS3Desc += 'the 5 (five) S3 bucket configuration parameters,<br/>';
upperFileS3Desc += getTabulation(4);
upperFileS3Desc += 'using a cripted web service for example.<br/><br/>';
upperFileS3Desc += getTabulation(1);
upperFileS3Desc += '<strong>fixedFileName</strong>: set a value not null and not equal to \'\' , <br/>';
upperFileS3Desc += getTabulation(4);
upperFileS3Desc += 'if you want keep the uploaded images whit same name in S3<br/>';
upperFileS3Desc += getTabulation(6);
upperFileS3Desc += 'bucket on each time upload<br/>';
upperFileS3Desc += getTabulation(4);
upperFileS3Desc += 'could be used a javascript function result - use \\\\\\\' to scape the \' <br/>';
upperFileS3Desc += getTabulation(1);
upperFileS3Desc += '<strong>fileNamePrefix</strong>: set a value not null and not equal to \'\' , <br/>';
upperFileS3Desc += getTabulation(4);
upperFileS3Desc += 'if you want a prefix for each user that upload the file<br/>';
upperFileS3Desc += getTabulation(4);
upperFileS3Desc += 'to identify the respective owner for example<br/>';
upperFileS3Desc += getTabulation(4);
upperFileS3Desc += 'could be used a javascript function result - use \\\\\\\' to scape the \' <br/>';
upperFileS3Desc += '*/';
upperFileS3Desc += '</em>';
//
var rockerAjaxHandlerDesc = 'Creates a <code>RockerAjaxHandler</code> object.<br/>';
rockerAjaxHandlerDesc += 'Make a  request for one url and when result is received can handle the result.<br/>';
rockerAjaxHandlerDesc += 'If the execution throw an error or  is not null the expected result and the returned result is different';
rockerAjaxHandlerDesc += 'then executes <code>handleUnsuceed</code> method. Otherwise executes <code>handleSuceed</code> method.';
rockerAjaxHandlerDesc += 'These methods should be overrided when is needed handle the result in callback.<br/><br/>';
rockerAjaxHandlerDesc += '<code>';
rockerAjaxHandlerDesc += '...<br/>';
rockerAjaxHandlerDesc += 'this.actionForm = "http://localhost:4000/rockstars";<br/>';
rockerAjaxHandlerDesc += '...<br/><br/>';
rockerAjaxHandlerDesc += '...<br/>';
rockerAjaxHandlerDesc += 'var url = this.actionForm + \'?operation=exampleOfUseOfAjaxHandler&expected=OK\';<br/>';
rockerAjaxHandlerDesc += 'var rajax = new RockerAjaxHandler(url,null);<br/>';
rockerAjaxHandlerDesc += '//Second parameter is the expected result.<br/>';
rockerAjaxHandlerDesc += getTabulation(1);
rockerAjaxHandlerDesc += 'Null value signify that the result is not the important to callback functions.<br/>';
rockerAjaxHandlerDesc += 'rajax.handleSuceed = function(result){<br/>';
rockerAjaxHandlerDesc += getTabulation(3);
rockerAjaxHandlerDesc += 'console.log(\'rajax.handleSuceed => \' + result);<br/>';
rockerAjaxHandlerDesc += '};<br/>';
rockerAjaxHandlerDesc += 'rajax.handleUnsuceed = function(result){<br/>';
rockerAjaxHandlerDesc += getTabulation(3);
rockerAjaxHandlerDesc += 'console.log(\'rajax.handleUnsuceed => \' + result);<br/>';
rockerAjaxHandlerDesc += '};<br/>';
rockerAjaxHandlerDesc += '//now afer override the callback functions is time for <br/>';
rockerAjaxHandlerDesc += getTabulation(1);
rockerAjaxHandlerDesc += 'the execution call - sending the ajax request<br/>';
rockerAjaxHandlerDesc += 'rajax.send();<br/>';
rockerAjaxHandlerDesc += '</code>';
//
var rockerClickTimeControlDesc = 'Use a singleton instance of <code>RockerClickTimeControl</code>';
rockerClickTimeControlDesc += ' to prevent a repetition of click event on a element before a number of ';
rockerClickTimeControlDesc += 'miliseconds.<br/> For example a button that should wait 2 seconds before a new';
rockerClickTimeControlDesc += 'click execution call.<br/><br/>';
rockerClickTimeControlDesc += 'The use of a singleton object <strong>singletonRockerClickTimeControl</strong> is required.<br/>';
rockerClickTimeControlDesc += 'Sintax: <em>singletonRockerClickTimeControl.validateClick(elementId,timeInMiliseconds);</em><br/><br/>';
rockerClickTimeControlDesc += 'Example:<br/>';
rockerClickTimeControlDesc += '<code>';
rockerClickTimeControlDesc += '...<br/>';
rockerClickTimeControlDesc += '&lt;input id="buttonTestId" type="button" value="Button Test" <br/>';
rockerClickTimeControlDesc += getTabulation(1);
rockerClickTimeControlDesc += ' onclick="if(!(singletonRockerClickTimeControl.validateClick(this.id,2000)))<br/>';
rockerClickTimeControlDesc += getTabulation(3);
rockerClickTimeControlDesc += '{return false;}<br/>';
rockerClickTimeControlDesc += getTabulation(1);
rockerClickTimeControlDesc += 'console.log(new Date().getTime());" /&gt;<br/>';
rockerClickTimeControlDesc += '...';
rockerClickTimeControlDesc += '</code>';
//
var rockerDragAndDropDesc = 'Provides a simple form to add drag and drop effect ';
rockerDragAndDropDesc += 'on a element by <code>RockerDragAndDrop</code> use. Should be used to move a element from a';
rockerDragAndDropDesc += 'initial position to other final position. Dont provide DOM structure manipulation. It is intended for use';
rockerDragAndDropDesc += ' whit modal panels or similars.<br/><br/>';
rockerDragAndDropDesc += '<code>';
rockerDragAndDropDesc += '...<br/>';
rockerDragAndDropDesc += 'new RockerDragAndDrop(idIndicator,idDrag);<br/>';
rockerDragAndDropDesc += '...';
rockerDragAndDropDesc += '</code><br/></br>';
rockerDragAndDropDesc += 'Example:<br/>';
rockerDragAndDropDesc += '<code>';
rockerDragAndDropDesc += '...<br/>';
rockerDragAndDropDesc += '&lt;div id="divContainerDraggableElemen" style="position: absolute; z-index:1000;" &gt;<br/>';
rockerDragAndDropDesc += getTabulation(1);
rockerDragAndDropDesc += '&lt;div id="divHeaderDraggableElement" <br/>';
rockerDragAndDropDesc += getTabulation(3);
rockerDragAndDropDesc += 'onmousedown="new RockerDragAndDrop(this.id,\'divContainerDraggableElemen\');" &gt;<br/>';
rockerDragAndDropDesc += getTabulation(2);
rockerDragAndDropDesc += 'Header of Panel<br/>';
rockerDragAndDropDesc += getTabulation(1);
rockerDragAndDropDesc += '&lt;/div&gt;<br/>';
rockerDragAndDropDesc += getTabulation(1);
rockerDragAndDropDesc += '&lt;div&gt;<br/>';
rockerDragAndDropDesc += getTabulation(2);
rockerDragAndDropDesc += 'Content of element panel.<br/>';
rockerDragAndDropDesc += getTabulation(1);
rockerDragAndDropDesc += '&lt;/div&gt;<br/>';
rockerDragAndDropDesc += '&lt;/div&gt;<br/>';
rockerDragAndDropDesc += '...';
rockerDragAndDropDesc += '</code>';
//
var rockerShafroindDesc = '<code>RockerShafroindd</code> it\'s a obfuscation mechanism that provide ';
rockerShafroindDesc += 'simple string obfuscation.This could be usefull for situations ';
rockerShafroindDesc += 'of basic security on hard-coded parameters. ';
rockerShafroindDesc += 'Not recommended for advanced operations and access permissions.<br/><br/>';
rockerShafroindDesc += 'Obfuscation of a string return a <strong>int[]</strong>:<br/>';
rockerShafroindDesc += '<code>';
rockerShafroindDesc += '...<br/>';
rockerShafroindDesc += 'var arrayInt = new RockerShafroindd().c(\'Hello\');<br/>';
rockerShafroindDesc += '// arrayInt => [188,144,110,16,164]<br/>';
rockerShafroindDesc += '...';
rockerShafroindDesc += '</code><br/><br/>';
rockerShafroindDesc += 'Undo-Obfuscation of a int[] return a <strong>string</strong>:<br/>';
rockerShafroindDesc += '<code>';
rockerShafroindDesc += '...<br/>';
rockerShafroindDesc += 'var dataArrayInt = [188,144,110,16,164];<br/>';
rockerShafroindDesc += 'var originalString = new RockerShafroindd().a(dataArrayInt);<br/>';
rockerShafroindDesc += '// originalString => \'Hello\'<br/>';
rockerShafroindDesc += '...';
rockerShafroindDesc += '</code>';
//
var rockerSplashMaskDesc = 'The <code>RockerSplashMask</code> provides a wait-mask to block user';
rockerSplashMaskDesc += ' actions while a return is waited.<br/><br/>';
rockerSplashMaskDesc += '<code>';
rockerSplashMaskDesc += '...<br/>';
rockerSplashMaskDesc += 'var splashMask = new RockerSplashMask(idElementToReceiveMask, minTimeInMiliseconds);<br/>';
rockerSplashMaskDesc += '...<br/>';
rockerSplashMaskDesc += '</code><br/><br/>';
rockerSplashMaskDesc += 'Add a mask:<br/>';
rockerSplashMaskDesc += '<code>';
rockerSplashMaskDesc += '...<br/>';
rockerSplashMaskDesc += 'splashMask.makeSplash();<br/>';
rockerSplashMaskDesc += '...';
rockerSplashMaskDesc += '</code><br/><br/>';
rockerSplashMaskDesc += 'Remove the mask:<br/>';
rockerSplashMaskDesc += '<code>';
rockerSplashMaskDesc += '...<br/>';
rockerSplashMaskDesc += 'splashMask.removeSplash();<br/>';
rockerSplashMaskDesc += '...';
rockerSplashMaskDesc += '</code>';
//
var rockerStorageDesc = '<code>RockerStorage</code> contains many functions of core functionality of framework.';
rockerStorageDesc += 'This could be usefull to handle Rocker Framework ';
rockerStorageDesc += 'elements. For example to access a input value into a <code>RockerForm</code> ';
rockerStorageDesc += 'or programatically \'click\' in a navigation button of a <code>RockerTable</code>.';
rockerStorageDesc += '<br/><br/>';
rockerStorageDesc += 'Always should be used the <strong>singletonRockerStorage</strong> object singleton instance.';
rockerStorageDesc += '<br/><br/>';
rockerStorageDesc += 'Recommend use is for advanced users that need advanced operations ';
rockerStorageDesc += 'as integration whit custom components.<br/>';
rockerStorageDesc += 'More informations only searching and studing the source code, please.';
//
var rockerCustomValidatorDesc = 'The <code>RockerCustomValidator</code> is projected for situations were is ';
rockerCustomValidatorDesc += 'desired only custom validation. For all other cases its recommended use of <code>';
rockerCustomValidatorDesc += 'RockerValidator</code> whit predefined functions, that also allow custom validation function.';
rockerCustomValidatorDesc += ' Should be overrided the <code>this.validate = function(stringValue){return true;};</code> ';
rockerCustomValidatorDesc += 'function.<br/><br/>';
rockerCustomValidatorDesc += 'Example:<br/><code>';
rockerCustomValidatorDesc += '...<br/>';
rockerCustomValidatorDesc += 'var nickNameValidator = new RockerCustomValidator();<br/>';
rockerCustomValidatorDesc += '// you should override the \'validate\' function to provide <br/>';
rockerCustomValidatorDesc += getTabulation(1);
rockerCustomValidatorDesc += 'custom validations, otherwise this validate nothing.<br/>';
rockerCustomValidatorDesc += 'nickNameValidator.validate = function(stringValue){<br/>';
rockerCustomValidatorDesc += getTabulation(1);
rockerCustomValidatorDesc += 'if(null == stringValue || singletonRockerCommons.trim(stringValue).length < 3){<br/>';
rockerCustomValidatorDesc += getTabulation(3);
rockerCustomValidatorDesc += '// dont forget the validation message (i18n or not)<br/>';
rockerCustomValidatorDesc += getTabulation(3);
rockerCustomValidatorDesc += 'nickNameValidator.validationMsg = <br/>';
rockerCustomValidatorDesc += getTabulation(4);
rockerCustomValidatorDesc += '\'Oh woow!! Nickname is required and need 3 or more chars!\';<br/>';
rockerCustomValidatorDesc += getTabulation(3);
rockerCustomValidatorDesc += 'return false;<br/>';
rockerCustomValidatorDesc += getTabulation(1);
rockerCustomValidatorDesc += '}<br/>';
rockerCustomValidatorDesc += getTabulation(1);
rockerCustomValidatorDesc += 'return true;<br/>';
rockerCustomValidatorDesc += '};<br/>';
rockerCustomValidatorDesc += 'arrayFields[i] = new InputText(\'Rockstar Nickname\',\'nickname\',\'\',<br/>';
rockerCustomValidatorDesc += getTabulation(1);
rockerCustomValidatorDesc += '130,nickNameValidator,\'Rock Star Nickname\',false,\'col-md-2\',false);<br/>';
rockerCustomValidatorDesc += 'i++;<br/>';
rockerCustomValidatorDesc += '...';
rockerCustomValidatorDesc += '</code>';
//
var rockerValidatorDesc = 'The <code>RockerValidator</code> could be used in <code>InputText</code>';
rockerValidatorDesc += 'or <code>TextArea</code> elements. Should be obtained ';
rockerValidatorDesc += 'and passed on constructor for them.<br/><br/>';
rockerValidatorDesc += 'Should be obtained by a singleton object <strong>singletonRockerFormValidator</strong>';
rockerValidatorDesc += ' functions. <br/> Contain predefined functions and permit addition of custom validation ';
rockerValidatorDesc += 'by overriding of <code>this.validate = function(stringValue){return true;};</code> ';
rockerValidatorDesc += 'function.<br/><br/>';
rockerValidatorDesc += 'Example:<br/>';
rockerValidatorDesc += '<code>';
rockerValidatorDesc += '...<br/>';
rockerValidatorDesc += 'var dateValidator = singletonRockerFormValidator.getTextMaskValidator(<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '[\'[0-9]\',\'[0-9]\',\'/\',\'[0-9]\',\'[0-9]\',\'/\',\'[0-9]\',\'[0-9]\',\'[0-9]\',\'[0-9]\']);<br/>';
rockerValidatorDesc += '// you can override the \'validate\' function to provide custom validations<br/>';
rockerValidatorDesc += 'dateValidator.validate = function(stringValue){<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += 'var msg = singletonRockerValidatorData.validateDate(<br/>';
rockerValidatorDesc += getTabulation(4);
rockerValidatorDesc += 'singletonRockerCommons.trim(stringValue));<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += 'if(null != msg && msg != \'\'){<br/>';
rockerValidatorDesc += getTabulation(5);
rockerValidatorDesc += '// dont forget the validation message (i18n or not)<br/>';
rockerValidatorDesc += getTabulation(5);
rockerValidatorDesc += 'dateValidator.validationMsg = singletonRockerI18n.getMessage(<br/>';
rockerValidatorDesc += getTabulation(7);
rockerValidatorDesc += '\'InputText.invalidDate\',[\'Date of Birth\',msg]);<br/>';
rockerValidatorDesc += getTabulation(5);
rockerValidatorDesc += 'return false;<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '}<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += 'return true;<br/>';
rockerValidatorDesc += '};<br/>';
rockerValidatorDesc += 'arrayFields[i] = new InputText(\'Date of Birth\',\'birthdate\',\'\',<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '100,dateValidator,null,<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += 'false,\'col-sm-2\',false);<br/>';
rockerValidatorDesc += 'i++;<br/>';
rockerValidatorDesc += '...';
rockerValidatorDesc += '</code>';
rockerValidatorDesc += '<br/><br/>';
rockerValidatorDesc += 'The \'No acceptable\' chars are removed in \'onkeyup\' HTML event. See the provided validators:<br/><br/>';
//
rockerValidatorDesc += '<strong>Integer validator</strong>: the input accept only number chars. <br/>';
rockerValidatorDesc += 'Milhar separator is set according americanFormat (true -> \',\' or false -> \'.\')<br/>';
rockerValidatorDesc += '<code>';
rockerValidatorDesc += 'singletonRockerFormValidator';
rockerValidatorDesc += '.getTextIntValidator(americanFormat,maxChars,minChars);';
rockerValidatorDesc += '</code><br/><br/>';
rockerValidatorDesc += 'Example:<br/>';
rockerValidatorDesc += '<code>';
rockerValidatorDesc += '...<br/>';
rockerValidatorDesc += 'var validator1 = singletonRockerFormValidator.getTextIntValidator(false,4,1);<br/>';
rockerValidatorDesc += '// accept => 1 or 11 or 111 or 1.111<br/>';
rockerValidatorDesc += 'var validator2 = singletonRockerFormValidator.getTextIntValidator(true,4,1);<br/>';
rockerValidatorDesc += '// accept => 1 or 11 or 111 or 1,111<br/>';
rockerValidatorDesc += '...';
rockerValidatorDesc += '</code><br/><br/><br/>';
//
rockerValidatorDesc += '<strong>Double validator</strong>: the input accept only number chars and a decimal separator char.<br/>';
rockerValidatorDesc += 'Milhar separator is set according americanFormat (true -> \',\' or false -> \'.\')<br/>';
rockerValidatorDesc += 'Decimal separator is set/validated according americanFormat (true -> \'.\' or false -> \',\')<br/>';
rockerValidatorDesc += '<code>';
rockerValidatorDesc += 'singletonRockerFormValidator.';
rockerValidatorDesc += 'getTextDoubleValidator(americanFormat,maxChars,minChars,<br/>';
rockerValidatorDesc += getTabulation(4);
rockerValidatorDesc += 'integerDigits,decimalDigits);<br/>';
rockerValidatorDesc += '</code><br/><br/>';
rockerValidatorDesc += 'Example:<br/>';
rockerValidatorDesc += '<code>';
rockerValidatorDesc += '...<br/>';
rockerValidatorDesc += 'var validator1 = singletonRockerFormValidator.getTextDoubleValidator(false,6,2,4,2);<br/>';
rockerValidatorDesc += '// accept => 11 ; 111  ; or 1.111 ;  <br/>';
rockerValidatorDesc += getTabulation(1);
rockerValidatorDesc += '1,0 ; 1,00 ; 11,00 ; 111,00 ; 1.111,00 ; <br/>';
rockerValidatorDesc += getTabulation(1);
rockerValidatorDesc += 'and others combinations that match min 2 numbers and max 6 numbers,<br/>';
rockerValidatorDesc += getTabulation(1);
rockerValidatorDesc += 'where 1 to 4 chars should be integer part and 0 to 2 chars <br/>';
rockerValidatorDesc += getTabulation(1);
rockerValidatorDesc += 'could be the decimal part.<br/>';
rockerValidatorDesc += 'var validator2 = singletonRockerFormValidator.getTextDoubleValidator(true,6,2,4,2);<br/>';
rockerValidatorDesc += '// same as validator1, only the \',\' is changed by \'.\' and \'.\' by \',\'<br/>';
rockerValidatorDesc += '...';
rockerValidatorDesc += '</code><br/><br/><br/>';
//
rockerValidatorDesc += '<strong>Allowed chars validator</strong>: the input accept only chars that match chars contained in array.<br/>';
rockerValidatorDesc += '<code>';
rockerValidatorDesc += 'singletonRockerFormValidator';
rockerValidatorDesc += '.getTextAllowedsValidator(arrayCharAlloweds,<br/>';
rockerValidatorDesc += getTabulation(4);
rockerValidatorDesc += 'maxChars,minChars);<br/>';
rockerValidatorDesc += '</code><br/><br/>';
rockerValidatorDesc += 'Example:<br/>';
rockerValidatorDesc += '<code>';
rockerValidatorDesc += '...<br/>';
rockerValidatorDesc += 'var validator1 = singletonRockerFormValidator.getTextAllowedsValidator(<br/>';
rockerValidatorDesc += getTabulation(5);
rockerValidatorDesc += 'singletonRockerFormValidator.alfaNumsText,250,3);<br/>';
rockerValidatorDesc += '// accept only alphanumeric chars (contained in predefined array \'alfaNumsText\')<br/>';
rockerValidatorDesc += 'var validator2 = singletonRockerFormValidator.getTextAllowedsValidator([\'A\',\'B\',\'c\',\'4\'],250,3);<br/>';
rockerValidatorDesc += '// accept only \'A\' (upper case), or \'B\' (upper case), or \'c\' lower case,<br/>';
rockerValidatorDesc += getTabulation(1);
rockerValidatorDesc += 'or 4 (four) numeric.<br/>';
rockerValidatorDesc += '...';
rockerValidatorDesc += '</code><br/><br/><br/>';
//
rockerValidatorDesc += '<strong>Forbidden chars validator</strong>: the input accept all chars except the ';
rockerValidatorDesc += 'chars that match chars contained in array. <br/>';
rockerValidatorDesc += '<code>';
rockerValidatorDesc += 'singletonRockerFormValidator';
rockerValidatorDesc += '.getTextForbiddenValidator(<br/>';
rockerValidatorDesc += getTabulation(4);
rockerValidatorDesc += 'arrayCharForbidden,maxChars,minChars);';
rockerValidatorDesc += '</code><br/><br/>';
rockerValidatorDesc += 'Example:<br/>';
rockerValidatorDesc += '<code>';
rockerValidatorDesc += '...<br/>';
rockerValidatorDesc += 'var validator1 = singletonRockerFormValidator.getTextForbiddenValidator(<br/>';
rockerValidatorDesc += getTabulation(4);
rockerValidatorDesc += 'singletonRockerFormValidator.numbers,250,3);<br/>';
rockerValidatorDesc += '// accept any chars except the numeric chars (contained in predefined array \'numbers\')<br/>';
rockerValidatorDesc += 'var validator2 = singletonRockerFormValidator.getTextForbiddenValidator([\'A\',\'B\',\'c\',\'4\'],250,3);<br/>';
rockerValidatorDesc += '// accept any char except \'A\' (upper case), and \'B\' (upper case), and \'c\' lower case,<br/>';
rockerValidatorDesc += getTabulation(1);
rockerValidatorDesc += 'and 4 (four) numeric.<br/>';
rockerValidatorDesc += '...';
rockerValidatorDesc += '</code><br/><br/><br/>';
//
rockerValidatorDesc += '<strong>Mask validator</strong>: use a mask that accept chars allowed in each position according the received array chars mask.<br/>';
rockerValidatorDesc += 'A char mask in array could be represented by:<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '- <strong>one simple char</strong> : allow only the same char on this relative position<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '- <strong>null</strong> or <strong>*</strong> : allow any char on this relative position<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '- <strong>[0-9]</strong> : allow only numbers on this relative position<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '- <strong>[a-z]</strong> : allow only alphabetic chars (ignore case) on this relative position<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '- <strong>[a-z][0-9]</strong> or <strong>[0-9][a-z]</strong>: allow only alphanumeric chars on this relative position<br/><br/>';
rockerValidatorDesc += '<code>';
rockerValidatorDesc += 'singletonRockerFormValidator';
rockerValidatorDesc += '.getTextMaskValidator(arrayMaskCharPositions);';
rockerValidatorDesc += '</code><br/><br/>';
rockerValidatorDesc += 'Example:<br/>';
rockerValidatorDesc += '<code>';
rockerValidatorDesc += '...<br/>';
rockerValidatorDesc += 'var dateValidator = singletonRockerFormValidator.getTextMaskValidator<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '([\'[0-9]\',\'[0-9]\',\'/\',\'[0-9]\',\'[0-9]\',\'/\',\'[0-9]\',\'[0-9]\',\'[0-9]\',\'[0-9]\']);<br/>';
rockerValidatorDesc += '// accept a date in format \'dd/mm/yyyy\'<br/>';
rockerValidatorDesc += 'var strangeValidator = singletonRockerFormValidator.getTextMaskValidator<br/>';
rockerValidatorDesc += getTabulation(1);
rockerValidatorDesc += '([\'[a-z]\',\'[0-9]\',\'&lt;\',\'[0-9][a-z]\',\'[a-z][0-9]\',\'@\',<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '\'[0-9][a-z]\',\'[a-z][0-9]\',\'.\',\'c\',\'o\',\'m\',\'&gt;\']);<br/>';
rockerValidatorDesc += '// accept only input on format \'a9&lt;aa@bb.cc.com&gt;\'';
rockerValidatorDesc += '...';
rockerValidatorDesc += '</code><br/><br/><br/>';
//
rockerValidatorDesc += 'Predefined chars arrays in \'singletonRockerFormValidator\':<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '- <strong>singleChars</strong>: <br/>';
rockerValidatorDesc += getTabulation(6);
rockerValidatorDesc += 'Numbers and Simple Letters whitout accents (upper and lower cases)<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '- <strong>numbers</strong>: <br/>';
rockerValidatorDesc += getTabulation(6);
rockerValidatorDesc += 'Only numbers<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '- <strong>letters</strong>: <br/>';
rockerValidatorDesc += getTabulation(6);
rockerValidatorDesc += 'Simple letters, some accentuated letters and some special chars<br/>';
rockerValidatorDesc += getTabulation(3);
rockerValidatorDesc += '- <strong>alfaNumsText</strong>: <br/>';
rockerValidatorDesc += getTabulation(6);
rockerValidatorDesc += ' contains all in <strong>letters</strong> and <strong>numbers</strong><br/>';
//
var rockerCommonsDesc = '<code>RockerCommons</code> provides many common functions, used in core of Rocker Framework';
rockerCommonsDesc += ' and usefull for diverses external situations for example show or hide a element whit a specific id.<br/><br/>';
rockerCommonsDesc += 'Should be used the singleton object <strong>singletonRockerCommons</strong><br/><br/>';
rockerCommonsDesc += 'Some functions (not all - inspect the source code to see all them):<br/>';
rockerCommonsDesc += '<code>';
rockerCommonsDesc += '...<br/>';
rockerCommonsDesc += 'singletonRockerCommons.isNumber(n);// return if \'n\' is of type numeric<br/>';
rockerCommonsDesc += '...<br/><br/>';
rockerCommonsDesc += '...<br/>';
rockerCommonsDesc += 'singletonRockerCommons.hide(\'myElemId\');// hide the element whit id \'myElemId\'"<br/>';
rockerCommonsDesc += '...<br/><br/>';
rockerCommonsDesc += '...<br/>';
rockerCommonsDesc += 'singletonRockerCommons.show(\'myElemId\');// hide the element whit id \'myElemId\'"<br/>';
rockerCommonsDesc += '...<br/><br/>';
rockerCommonsDesc += '...<br/>';
rockerCommonsDesc += 'singletonRockerCommons.trim(value);<br/>// remove from value the spaces in begin and on end then return value<br/>';
rockerCommonsDesc += '...<br/><br/>';
rockerCommonsDesc += '...<br/>';
rockerCommonsDesc += 'singletonRockerCommons.replaceAll(str, searched, replacer);<br/>';
rockerCommonsDesc += '//replace all occurrences of searched by replacer into a str and then return str<br/>';
rockerCommonsDesc += '...<br/><br/>';
rockerCommonsDesc += '...<br/>';
rockerCommonsDesc += 'singletonRockerCommons.getElement(\'myElemId\');<br/>';
rockerCommonsDesc += '// return same result as document.getElementById(\'myElemId\');<br/>';
rockerCommonsDesc += '...<br/><br/>';
rockerCommonsDesc += '...<br/>';
rockerCommonsDesc += 'singletonRockerCommons.clickElementById(\'myElemId\');<br/>';
rockerCommonsDesc += '// trigger the event \'onclick\' of element \'myElemId\' whitout a user interference<br/>';
rockerCommonsDesc += '...<br/><br/>';
rockerCommonsDesc += '...<br/>';
rockerCommonsDesc += 'singletonRockerCommons.setClass(\'myElemId\',\'className\');<br/>';
rockerCommonsDesc += '//aplies the CSS class \'className\' into element whit the id \'myElemId\'<br/>';
rockerCommonsDesc += '...';
rockerCommonsDesc += '</code>';
//
var rockerI18nDesc = '<code>RockerI18n</code> provides a internacionalization ';
rockerI18nDesc += ' messages mechanism to <strong>Rocker</strong> framework.<br/><br/>';
rockerI18nDesc += 'Should be used the "singletonRockerI18n" singleton object.<br/><br/>';
rockerI18nDesc += 'To change the internacionalization language, copy the messages array from ';
rockerI18nDesc += 'file <strong>i18n.js</strong>, modify as you wish and then pass to ';
rockerI18nDesc += 'singletonRockerI18n: <br/>';
rockerI18nDesc += '<code>';
rockerI18nDesc += '...<br/>';
rockerI18nDesc += 'var messagesArray = [[\'key1\',\'value1\'],...,[\'keyN\',\'valueN\']];<br/>';
rockerI18nDesc += 'singletonRockerI18n.setMessages(messagesArray);<br/>';
rockerI18nDesc += '...';
rockerI18nDesc += '</code><br/><br/>';
rockerI18nDesc += 'Pay atention:<br/>';
rockerI18nDesc += getTabulation(2);
rockerI18nDesc += '&#123;n&#125; are the position to be inserted the dinamic values on messages.<br/>';
rockerI18nDesc += getTabulation(4);
rockerI18nDesc += 'Dont disturb them.<br/>';
rockerI18nDesc += getTabulation(2);
rockerI18nDesc += 'After calling <strong>setMessages(...)</strong> the components ';
rockerI18nDesc += 'need re-draw to take effect new i18n messages.<br/><br/>';
rockerI18nDesc += 'You can use this mechanism to add yourself created i18n messages ';
rockerI18nDesc += 'to use in your application:<br/>';
rockerI18nDesc += '<code>';
rockerI18nDesc += '...<br/>';
rockerI18nDesc += 'var key = \'myI18nMsgKey\';<br/>';
rockerI18nDesc += 'var arrayParams = [\'paramValue_0\',\'paramValue_1\'];<br/>';
rockerI18nDesc += 'var myI18nMsg = singletonRockerI18n.getMessage(key,arrayParams);<br/>';
rockerI18nDesc += 'arrayFields[i] = new InputText(myI18nMsg,\'nameOfObjectAttribute\',...);<br/>';
rockerI18nDesc += 'i++;<br/>';
rockerI18nDesc += '...';
rockerI18nDesc += '</code>';
//
var selectDesc = 'The <code>Select</code> Creates a HTML combobox/select element.<br/><br/>';
selectDesc += '<code>';
selectDesc += 'Select(label,name,arrayLabels,arrayValues,<br/>';
selectDesc += getTabulation(3);
selectDesc += 'defaultValue,canBeEmpty,width,onchange,onclick,<br/>';
selectDesc += getTabulation(3);
selectDesc += 'disabled,bootstrapClass,bootstrapNewLine);<br/>';
selectDesc += '</code><br/><br/>';
selectDesc += 'Example:<br/>';
selectDesc += '<code>';
selectDesc += '...<br/>';
selectDesc += 'arrayFields[i] = new Select(\'Musical Style\',\'style\',<br/>';
selectDesc += getTabulation(3);
selectDesc += '[\'Classic Rock\',\'Pop Rock\',\'Hard Rock\',\'Metal\',\'Heavy Metal\'],<br/>';
selectDesc += getTabulation(3);
selectDesc += '[\'classicrock\',\'poprock\',\'hardrock\',\'metal\',\'heavymetal\'],<br/>';
selectDesc += getTabulation(3);
selectDesc += '\'\',false,120,\'console.log(\\\'onchange\\\');\',<br/>';
selectDesc += getTabulation(3);
selectDesc += '\'console.log(\\\'onclick\\\');\',false,\'col-md-2\',false);<br/>';
selectDesc += 'i++;<br/>';
selectDesc += '...<br/>';
selectDesc += '</code>';
selectDesc += '';
//
var rockerVisualCoderDesc = 'The <code>RockerVisualCoder</code> is a Tool element that helps to create <code>RockerForm</code>';
rockerVisualCoderDesc += 'and <code>RockerTable</code> elements in a (dont drag-and-drop) visual mode.<br/><br/>';
rockerVisualCoderDesc += 'You should configure the elements and add on a table ';
rockerVisualCoderDesc += '("Save/Add Element" button), then click on "Generate Code!". ';
rockerVisualCoderDesc += 'Now you can "Save to file" button click.<br/> This is a Rocker by Rocker Element, or ';
rockerVisualCoderDesc += 'better explaining was created based on other Rocker elements as construction blocks.<br/><br/>';
rockerVisualCoderDesc += '<code>';
rockerVisualCoderDesc += 'new RockerVisualCoder(idAppenderForm,width);';
rockerVisualCoderDesc += '</code><br/><br/>';
rockerVisualCoderDesc += 'Example:(see "drawAppenders" function on rockstars.js file)<br/>';
rockerVisualCoderDesc += '<code>';
rockerVisualCoderDesc += '...<br/>';
rockerVisualCoderDesc += 'new RockerVisualCoder(\'appender9\',this.width - 15);<br/>';
rockerVisualCoderDesc += 'singletonRockerCommons.hide(\'appender9\');<br/>';
rockerVisualCoderDesc += '...<br/>';
rockerVisualCoderDesc += '</code><br/><br/>';

var data = [
            ['Appender',appenderDesc],
            ['Button',buttonDesc],
            ['CheckGroup',checkGroupDesc],
            ['Hidden',hiddenDesc],
            ['InputText',inputTextDesc],
            ['Label',labelDesc],
            ['RadioGroup',radioGroupDesc],
            ['RockerForm',rockerFormDesc],
            ['RockerTable',rockerTableDesc],
            ['Select',selectDesc],
            ['Spacer',spacerDesc],
            ['Styler',stylerDesc],
            ['TextArea',textAreaDesc],
            ['UpperFile',upperFileDesc],
            ['UpperFileS3',upperFileS3Desc],
            ['RockerI18n',rockerI18nDesc],
            ['RockerAjaxHandler',rockerAjaxHandlerDesc],
            ['RockerClickTimeControl',rockerClickTimeControlDesc],
            ['RockerCommons',rockerCommonsDesc],
            ['RockerDragAndDrop',rockerDragAndDropDesc],
            ['RockerShafroind',rockerShafroindDesc],
            ['RockerSplashMask',rockerSplashMaskDesc],
            ['RockerStorage',rockerStorageDesc],
            ['RockerValidator',rockerValidatorDesc],
            ['RockerCustomValidator',rockerCustomValidatorDesc],
            ['RockerVisualCoder',rockerVisualCoderDesc]
            ];
function componentsData(){
	return data;
};
