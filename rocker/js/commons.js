var RockerCommons = function(){	this.initialized = false;	this.initialize = function(){		this.initialized = true;	};	this.validate = function(){		if(!this.initialized){			console.log('You should use the singleton variable "singletonRockerCommons" ');			return false;		}		return true;	};	this.setAdjustedValueIfNeeded = function(elemId,oldValue){		if(!this.validate()){return;}		try {			if(null!=elemId && elemId != ''){				var newValue = singletonRockerStorage.validateJsInputText(elemId,oldValue);				if(null!=oldValue && null!=newValue && (oldValue!=newValue)){					var elem = this.getElement(elemId);					if(null!=elem){						elem.value = newValue;					}				}			}		} catch (error) {			console.log('Error on singletonRockerCommons.setAdjustedValueIfNeeded() : ' + error);		}	};	this.stringToArrayString = function(string,scape){		var array = string.split(',');		var arrayString = '';		var comma = '';		var stringIdentifier = (scape ? '\\\'' : '\'');		for(var i = 0; i < array.length; i++){			arrayString += comma + stringIdentifier +  array[i] + stringIdentifier;			comma = ',';		}		return ('[' + arrayString + ']');	};	this.arrayToString = function(array){		if(!this.validate()){return '';}		var string = '';		try{			if(null!=array && array.length > 0){				var size = array.length;				for(var i = 0; i < size; i++){					if(null!=array[i] && this.trim(array[i]).length > 0){						if(string.length > 0){							string += ',';						}						string += this.trim(array[i]);					}				}			}		}catch(error){console.log(error);}		return string;	};	this.isNumber = function(n) {		if(!this.validate()){return false;}		return (!isNaN(parseFloat(n)) && isFinite(n));	};	this.trim = function(stringValue) {		if(!this.validate()){return null;}    	return stringValue.replace(/^\s+|\s+$/g,'');    };	this.replaceAll = function(str, searched, replacer){		if(!this.validate()){return '';}		var pos = str.indexOf(searched);		while (pos != -1){			str = str.replace(searched, replacer);			pos = str.indexOf(searched);		}		return str;	};	this.resumeString = function(string ,max, reverse){		if(!this.validate()){return '';}    	var tam = string.length ;    	if(tam <= max){    		return string;    	}    	if(reverse){    		string = string.substring(tam - max + 4);    		string = '...' + string;    	}else{    		string = string.substring(0, max - 4);    		string += '...';    	}    	return string;    };	this.isTagIn = function(event,arrayTags){		if(!this.validate()){return false;}		var element = null;		if (event.target) { 			element = event.target;		}else if (event.srcElement){			element = even.srcElement;		}		if(null!=arrayTags){			var size = arrayTags.length;			for(var i = 0; i < size; i++){				var tag = arrayTags[i];				if(null==tag || tag == ''){continue;}				if((element.tagName == tag) || (element.tagName == tag.toLowerCase()) || (element.tagName == tag.toUpperCase())){					return true;				}			}		}		return false;	};	this.stopPropagation = function(event){		if(!this.validate()){return false;}		if(this.isTagIn(event,['a'])){return true;}		try{			event.cancelBubble = true;		}catch(error){}		if(!window.event){			try{				event.stopPropagation();			}catch(error){}		}		return false;		};	this.getElement = function(id){		if(!this.validate()){return null;}		try{			return window.document.getElementById(id);		}catch(error){console.log(error); return null;}	};	this.hide = function(id){		if(!this.validate() || null==this.getElement(id)){return;}		try{this.getElement(id).style.display = 'none';}catch(error){console.log(error);}	};	this.isBlock = function(id){		if(!this.validate()){return false;}		try{return (this.getElement(id).style.display == 'block');}catch(error){console.log(error); return false;}	};	this.isInline = function(id){		if(!this.validate()){return false;}		try{return (this.getElement(id).style.display == 'inline');}catch(error){console.log(error); return false;}	};	this.show = function(id){		if(!this.validate()){return;}		try{this.getElement(id).style.display = 'block';}catch(error){console.log(error);}	};	this.getInnerBtToggle = function(expand){		var innerStyleBt = 'margin: 1px 0px 0px -4px; height: 17px; width: 17px; border-radius: 9px !important;';		var inner = '<span class="rockerTableButton ui-icon-circle-'; 		inner += (expand ? 'plus' : 'minus') + '" style="' + innerStyleBt + '"></span>';		return inner;	};	this.toggle = function(id,idBtToggle){		if(!this.validate()){return;}		var elem = this.getElement(id);		if(null!=elem){			var inner = '';			if(this.isBlock(id)){				this.hide(id);				inner = this.getInnerBtToggle(true);			}else{				this.show(id);				inner = this.getInnerBtToggle(false);			}			this.innerHtml(idBtToggle, inner);		}	};	this.toggleUp = function(id,idBtToggle){		if(!this.validate()){return;}		var elem = this.getElement(id);		if(null!=elem){			if(!this.isBlock(id)){				this.show(id);				this.innerHtml(idBtToggle, this.getInnerBtToggle(false));			}		}	};	this.toggleDown = function(id,idBtToggle){		if(!this.validate()){return;}		var elem = this.getElement(id);		if(null!=elem){			if(this.isBlock(id)){				this.hide(id);				this.innerHtml(idBtToggle, this.getInnerBtToggle(true));			}		}	};	this.checked = function(id){		if(!this.validate()){return false;}		try{return this.getElement(id).checked;}catch(error){console.log(error);}	};	this.setClass = function(id,nameOfClass){		if(!this.validate()){return;}		try{this.getElement(id).className = nameOfClass;}catch(error){console.log(error);}	};	this.clickElementById = function(idElem){		if(!this.validate()){return false;}		try{this.clickElement(this.getElement(idElem));}catch(error){console.log(error);}	};	this.clickElement = function(element){		if(!this.validate()){return false;}		if(null==element){return false;}		try{			element.click();		}catch(ex){			try{				element.onclick();			}catch(ex2){				try{					var event = document.createEvent("HTMLEvents"); 					event.initEvent("click", true, true); 					element.dispatchEvent(event);				}catch(ex3){}			}		}		return true;	};	this.keyUpElementById = function(idElem){		if(!this.validate()){return false;}		try{keyUpElement(this.getElement(idElem));}catch(error){console.log(error);}	};	this.keyUpElement = function(element){		if(!this.validate()){return false;}		try{			element.keyup();		}catch(ex){			try{				element.onkeyup();			}catch(ex2){				try{					var event = document.createEvent("HTMLEvents"); 					event.initEvent("keyup", true, true); 					element.dispatchEvent(event);				}catch(ex3){}			}		}	};	this.innerHtml = function(idToInner,innerTo){		if(!this.validate()){return;}		if(null!=idToInner && idToInner != '' && null!=innerTo){			this.getElement(idToInner).innerHTML = innerTo;		}	};	this.addEvent = function addEvent(obj, evType, fn){		if(!this.validate()){return;}		if (typeof obj == "string"){			if (null == (obj = this.getElement(obj))){				return;			}		}		if (obj.addEventListener){			return obj.addEventListener(evType, fn, true);		} else if (obj.attachEvent){			return obj.attachEvent(("on" + evType), fn);		} else {			return;		}	};	this.blockMouseOverDown = function(){		if(!this.validate()){return false;}		document.onmousemove = function(){return false;};	};	this.unBlockMouseOverDown = function(){		if(!this.validate()){return false;}		document.onmousemove = null;	};	this.getStyleWidth = function(elemId){		if(!this.validate()){return 0;}		try {			var w = 0;			if(null!=elemId){				w = this.getElement(elemId).style.width;				w = w.replace('px','');				w = w.replace('em','');				w = parseInt(w);			}			return w;		} catch (error) {console.log(error); return 0;}	};	this.setStyleWidth = function(elemId,size,um){		if(!this.validate()){return;}		try {			if(null!=elemId){				if(null==um){um = 'px';}				this.getElement(elemId).style.width = size + um;			}		} catch (error) {console.log(error);}	};	this.incrementaStyleWidth = function(elemId,increment,um){		if(!this.validate()){return;}		try {			if(null!=elemId){				if(null==um){um = 'px';}				var w = this.getStyleWidth(elemId);				w += increment;				this.setStyleWidth(elemId,w,um);			}		} catch (error) {console.log(error);}	};	this.getPosition = function(eId, ev){		if(!this.validate()){return {x: 0, y: 0};}		var e = this.getElement(eId);		var left = 0;		var top  = 0;		while (e.offsetParent){			left += e.offsetLeft;			top  += e.offsetTop;			e = e.offsetParent;		}		left += e.offsetLeft;		top  += e.offsetTop;		if(null!=ev){			var coords = this.mouseCoords(ev);			return {x: coords.x - left, y: coords.y - top};		}		return {x: left, y: top};	};	this.mouseCoords = function(ev){		if(!this.validate()){return {x: 0, y: 0};}		var coords = null;		if(ev.pageX || ev.pageY){			coords = {x:ev.pageX, y:ev.pageY};		}else{			coords = {				x:ev.clientX + document.body.scrollLeft - document.body.clientLeft,				y:ev.clientY + document.body.scrollTop  - document.body.clientTop			};		}		return coords;	};	this.isMouseoverElement = function(id,ev){		if(!this.validate()){return false;}		try{			var elem = this.getElement(id);			if(null!=elem && null!=ev){				var coords = this.mouseCoords(ev);				var x = coords.x;				var y = coords.y;				var left = elem.offsetLeft;				var w = left + elem.offsetWidth;				var top = elem.offsetTop;				var h = top + elem.offsetHeight;				if(x >= left && x <= w){					if(y>= top && y <= h){						return true;					}				}			}			return false;		}catch(error){console.log(error);}	};	this.isMouseoverElementByElement = function(id,ev){		if(!this.validate()){return false;}		try{			var elem = this.getElement(id);			if(null!=elem && null!=ev){				var coords = this.getPosition(id, ev);				var x = coords.x;				var y = coords.y;				var left = elem.offsetLeft;				var w = left + elem.offsetWidth;				var top = elem.offsetTop;				var h = top + elem.offsetHeight;				if(x >= left && x <= w){					if(y>= top && y <= h){						return true;					}				}			}			return false;		}catch(error){console.log(error);}	};	this.scrollBottom = function(id,defaultTam){		if(!this.validate()){return false;}		if(null==defaultTam){defaultTam = 0;}		if(null!=id && id!=''){			var elem = this.getElement(id);			if(null!=elem){				if(null!=elem.scrollHeight && elem.scrollHeight > 0){					elem.scrollTop = elem.scrollHeight;				}else{					elem.scrollTop = defaultTam;				}			}		}	};	this.generateRandomString = function(){	    var chars = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','x','z','w','y'];	    var randString = '';	    for(var i = 0; i < 15; i++){	      var rand = Math.random();	      var index = parseInt('0' + (rand * 26));	      if(index > 25){	        index = 25;	      }	      randString += chars[index];	    }	    return (new Date().getTime() + '_' + randString);	};	this.createAppenderBeforeOf = function(idElementRef,idAppenderElem){		try {			var elementRef =  document.getElementById(idElementRef);			var node = document.createElement("div");			node.id = idAppenderElem;			var parentNode = elementRef.parentNode;			parentNode.insertBefore(node,elementRef);			return true;		} catch (error) {			console.log('Error on createAppenderBeforeOf: ' + error);			return false;		}	};	this.removeAppenderBeforeOf = function(idAppenderElem){		try{			var node = document.getElementById(idAppenderElem);			var parentNode = node.parentNode;			parentNode.removeChild(node);		}catch(error){			console.log('Error on removeAppenderBeforeOf: ' + error);		}	};	this.print = function(idElemTargetPrint,idRootDoc){		if(!this.validate()){return false;}		if(null==idRootDoc || idRootDoc == ''){			console.log('idRootDoc could not be null neither empty.');			return;		}else if(null==idElemTargetPrint || idElemTargetPrint == ''){			console.log('idElemTargetPrint could not be null neither empty.');			return;		}		var doc =  document.getElementById(idRootDoc);		var divToPrint =  document.getElementById(idElemTargetPrint);		if(null==doc){			console.log('idRootDoc element dont exist!');			return;		}else if(null==divToPrint){			console.log('idElemTargetPrint element dont exist!');			return;		}		var idTemp = 'div_tempImpress_' + new Date().getTime();		var node = null;		var div = null;		try{			node = document.createElement("div");			node.id = idTemp;			document.body.insertBefore(node,doc);			div = node;			div.style.display = 'block';			doc.style.display = 'none';			div.innerHTML = divToPrint.innerHTML;			window.print();			div.style.display = 'none';			doc.style.display = 'block';		}catch(error){			if(null!=div){				div.style.display = 'none';			}			doc.style.display = 'block';			console.log('Error on print: ' + error);		}		if(null!=node){			document.body.removeChild(node);		}	};	this.createShadowMask = function(id,zIndex){		var maxX = window.innerWidth;		var maxY = window.innerHeight;		var nodeFirst = document.body.childNodes[0];		var node = document.createElement("div");		node.id = id;		node.style.width = maxX + 'px';		node.style.height = maxY + 'px';		node.style.zIndex = zIndex;		node.style.position = 'fixed';		node.style.marginTop = '-5px';		node.style.backgroundColor = 'rgba(233,239,247,0.85)';		document.body.insertBefore(node,nodeFirst);	};	this.removeShadowMask = function(id){		var elem = this.getElement(id);		if(null==elem){			return;		}		var parent = elem.parentNode;		parent.removeChild(elem);	};};var singletonRockerCommons = new RockerCommons();singletonRockerCommons.initialize();